CREATE OR REPLACE FUNCTION public.fn_get_questions_v3(\n  p_category_slug text,\n  p_parent_slug text default null,\n  p_mode text default null,\n  p_tier text default null,\n  p_limit int default 20\n)\nRETURNS jsonb\nLANGUAGE plpgsql\nAS \nDECLARE\n  v_limit int := LEAST(p_limit, 50);\n  results jsonb;\nBEGIN\n  SELECT jsonb_build_object(\n    'success', true,\n    'parent_slug', p_parent_slug,\n    'category_slug', p_category_slug,\n    'mode', p_mode,\n    'tier', p_tier,\n    'limit', v_limit,\n    'count', COUNT(*),\n    'questions', COALESCE(\n      jsonb_agg(\n        jsonb_build_object(\n          'id', q.id,\n          'question', q.question_text,\n          'choices', q.choices,\n          'answer_key', q.answer_key,\n          'explanations', q.explanations,\n          'access_tier', COALESCE(q.access_tier, 'free'),\n          'exam_pool', COALESCE(q.exam_pool, false),\n          'difficulty', q.difficulty,\n          'source', q.source\n        )\n      ), '[]'::jsonb\n    )\n  )\n  INTO results\n  FROM public.questions q\n  WHERE\n    q.is_active = true\n    AND q.status = 'published'\n    AND q.category_slugs @> jsonb_build_array(p_category_slug)\n    AND (p_mode IS NULL OR lower(p_mode) <> 'exam' OR q.exam_pool = true)\n    AND (p_tier IS NULL OR lower(p_tier) <> 'pro' OR q.access_tier = 'pro')\n  ORDER BY q.id ASC\n  LIMIT v_limit;\n\n  RETURN results;\nEND;\n;\n\nGRANT EXECUTE ON FUNCTION public.fn_get_questions_v3(text, text, text, text, int)\nTO anon, authenticated, service_role;
