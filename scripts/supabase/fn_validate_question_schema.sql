CREATE OR REPLACE FUNCTION public.fn_validate_question_schema(\n  p_question_id uuid\n)\nRETURNS jsonb\nLANGUAGE plpgsql\nAS \nDECLARE\n  q record;\n  missing_fields text[];\n  valid boolean := true;\nBEGIN\n  SELECT * INTO q FROM public.questions WHERE id = p_question_id;\n\n  IF q.id IS NULL THEN\n    RETURN jsonb_build_object('success', false, 'error', 'Question not found');\n  END IF;\n\n  missing_fields := ARRAY[]::text[];\n\n  -- Check required fields\n  IF q.question_text IS NULL OR length(trim(q.question_text)) = 0 THEN\n    missing_fields := array_append(missing_fields, 'question_text');\n  END IF;\n\n  IF q.answer_key IS NULL OR length(trim(q.answer_key)) = 0 THEN\n    missing_fields := array_append(missing_fields, 'answer_key');\n  END IF;\n\n  IF q.choices IS NULL OR jsonb_array_length(q.choices) < 2 THEN\n    missing_fields := array_append(missing_fields, 'choices');\n  END IF;\n\n  IF q.explanations IS NULL OR jsonb_typeof(q.explanations) <> 'object' THEN\n    missing_fields := array_append(missing_fields, 'explanations');\n  END IF;\n\n  IF q.status IS NULL THEN\n    missing_fields := array_append(missing_fields, 'status');\n  END IF;\n\n  IF array_length(missing_fields, 1) > 0 THEN\n    valid := false;\n  END IF;\n\n  RETURN jsonb_build_object(\n    'success', valid,\n    'question_id', p_question_id,\n    'missing_fields', missing_fields\n  );\nEND;\n;\n\nGRANT EXECUTE ON FUNCTION public.fn_validate_question_schema(uuid) TO anon, authenticated, service_role;
